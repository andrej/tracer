#!/usr/bin/env ruby

# This script generates the table of system call names, by parsing 
# architecure-specific system call information in the 'asm/unistd.h' header.

require 'set'

# Helper function that prints commands being executed
def pexec(cmd)
	print "#{cmd}\n"
	return `#{cmd}`
end

# Argument Parsing

cc = ENV.fetch("CC", "gcc")
tracer_dir = ENV.fetch("TRACER_DIR", ".")

unistd_include = "asm/unistd.h"
output_file = "#{tracer_dir}/src/generated/syscall_names_table.cpp"
temp_file_name = "#{tracer_dir}/build/tracer_temp_syscall_enumerator"

if ARGV.length >= 1
	output_file = ARGV[0]
end
if ARGV.length >= 2
	unistd_include = ARGV[1]
end
if ARGV.length >= 3
	temp_file_name = ARGV[2]
end
if ARGV.length >= 4
	print "Usage: #{$PROGRAM_NAME} [output_file [unistd_include [tempfile_name]]\n"
	exit(1)
end

print "#{$PROGRAM_NAME}  cc: #{cc}  unistd_include: #{unistd_include}  output_file: #{output_file}  temp_file_name: #{temp_file_name}\n"

# Acquire list of system calls on current system

# System call number definition regex, matches things such as
# #define __NR_openat 52
syscall_def_regex = /^#define[[:blank:]]+(__NR(3264)?_([[:graph:]]+))[[:blank:]]+([[:graph:]]+)/

definitions = SortedSet.new

result = pexec("echo \"#include <#{unistd_include}>\" | #{cc} -dM -E -xc - -o-")
abort "could not gather list of system calls\n" if not $?.success?
result.each_line do |line|
	match = line.match(syscall_def_regex)
	next if not match
	definitions.add(match[1])
end


# Acquire system call numbers by evaluating macros
# The most reliable way to do this seems to be to simply compile a file that
# uses these macros, then running it.
source = "
#include <#{unistd_include}>
#include <stdio.h>
int main(int argc, char **argv) {
	#{definitions.map { |x| "printf(\"#define #{x} %d\\\\n\", #{x});" }.join("\n")}
	return 0;
}
"

number_to_name = Hash.new
name_to_number = Hash.new
max_syscall_number = 0


pexec("echo '#{source}' | #{cc} -xc - -o '#{temp_file_name}'")
abort "could not compile temporary system call enumerator\n" if not $?.success?
result = pexec("exec #{temp_file_name}")
abort "non-zero exit of temporary system call enumerator\n" if not $?.success?
#result = pexec("rm '#{temp_file_name}'")
warn "could not remove temporary system call enumerator\n" if not $?.success?
result.each_line do |line|
	match = line.match(syscall_def_regex)
	if not match then 
		warn "line did not match: #{line}"
		next
	end
	name, number = match[3], Integer(match[4])
	if number_to_name.key?(number) then
		if number_to_name[number] == name then
			next
		end
		warn "multiple system calls (#{name}, #{number_to_name[number]}) for syscall number #{number}"
	end
	number_to_name[number] = name
	name_to_number[name] = number
	max_syscall_number = [max_syscall_number, number].max
end

# Write out
File.open(output_file, 'w') do |file|
	file.write(
"#include \"tracer.hpp\"

// This file was automatically generated by build_scripts/#{$PROGRAM_NAME}

const long tracer::max_syscall_number = #{max_syscall_number};

const char *tracer::syscall_names[] = {
	#{(0..max_syscall_number).map { |i|
		number_to_name.has_key?(i) ? '"' + number_to_name[i] + '"' : 'NULL'
	}.join(",\n	")}
};
"
	)
end